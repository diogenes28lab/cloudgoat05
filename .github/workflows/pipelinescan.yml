name: Veracode Pipeline Scan  üõ†Ô∏è

on:
  workflow_dispatch: # Permite a execu√ß√£o manual do workflow pelo GitHub Actions
  push:
    branches: [ master ] # Executa o workflow quando h√° um push na branch master
  pull_request:
    branches: [ master ] # Executa o workflow em pull requests direcionados √† branch master

jobs:
  build:
    runs-on: ubuntu-latest # Define que o job rodar√° em um ambiente Linux mais recente
    steps:
      - uses: actions/checkout@v4 # Faz o checkout do c√≥digo-fonte no reposit√≥rio

      - name: Zip Project
        run: zip -r project.zip . # Compacta o projeto em um arquivo ZIP
        env:
          build-name: project.zip # Define o nome do arquivo ZIP

      - name: Archive package
        uses: actions/upload-artifact@v4 # Salva o ZIP como um artefato
        with:
          name: CodePackage # Nome do artefato salvo
          path: project.zip # Caminho do arquivo ZIP

  pipeline-scan:
    needs: build # Garante que o job 'build' seja conclu√≠do antes de executar este
    runs-on: ubuntu-latest # Executa o job em um ambiente Linux
    container:
      image: veracode/pipeline-scan:latest # Utiliza a imagem oficial do Veracode Pipeline Scan
      options: --user root # Executa o container com permiss√µes de root

    steps:
      - name: Retrieve artifact
        uses: actions/download-artifact@v4 # Baixa o ZIP gerado no job 'build'
        with:
          name: CodePackage # Nome do artefato que foi salvo anteriormente

      - name: Pipeline Scan

        # Executa o Veracode Pipeline Scan
        # Autentica√ß√£o via API ID
        # Autentica√ß√£o via API Key
        # Falha se houver vulnerabilidades de alto risco
        # Arquivo que ser√° analisado
        # ID da aplica√ß√£o na Veracode
        # Gera um relat√≥rio em formato JSON
        run: |
          java -jar /opt/veracode/pipeline-scan.jar \
          --veracode_api_id="${{ secrets.VERACODE_API_ID }}" \ 
          --veracode_api_key="${{ secrets.VERACODE_API_KEY }}" \ 
          --fail_on_severity="Very High, High" \ 
          --file="project.zip" \ 
          --app_id="${{ secrets.VERACODE_APP_ID }}" \ 
          --json_output_file="results.json" 
        continue-on-error: true # Permite que o job continue mesmo se houver falhas

      - name: Upload Scan Results
        uses: actions/upload-artifact@v4 # Salva o relat√≥rio JSON como um artefato
        with:
          name: ScanResults # Nome do artefato gerado
          path: results.json # Caminho do arquivo JSON gerado pelo scan

  results_to_sarif:
    needs: pipeline-scan # S√≥ executa se o job 'pipeline-scan' for conclu√≠do
    runs-on: ubuntu-latest # Executa o job em um ambiente Linux
    steps:
      - name: Get scan results
        uses: actions/download-artifact@v4 # Baixa os resultados do scan
        with:
          name: ScanResults # Nome do artefato gerado pelo scan

      - name: Convert pipeline scan output to SARIF format
        id: convert
        uses: Veracode/veracode-pipeline-scan-results-to-sarif@v1.0.7 # Converte o JSON em formato SARIF
        with:
          pipeline-results-json: results.json # Arquivo de entrada
          output-results-sarif: results.sarif # Arquivo de sa√≠da em formato SARIF
